type token =
  | ID of (string)
  | CONST of (int)
  | MUL
  | DIV
  | MOD
  | ADD
  | SUB
  | LT
  | LE
  | GT
  | GE
  | EQ
  | NE
  | BAND
  | XOR
  | BOR
  | AND
  | OR
  | SWAP
  | COMMA
  | WCOLON
  | MODADD
  | MODSUB
  | MODXOR
  | LPAREN
  | RPAREN
  | LBRA
  | RBRA
  | CLASS
  | INHERITS
  | METHOD
  | CALL
  | UNCALL
  | CONSTRUCT
  | DESTRUCT
  | SKIP
  | FROM
  | DO
  | LOOP
  | UNTIL
  | INT
  | NIL
  | IF
  | THEN
  | ELSE
  | FI
  | LOCAL
  | DELOCAL
  | NEW
  | DELETE
  | COPY
  | UNCOPY
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Syntax

let parse_error s = print_endline s

let anyId2obj = function
  | x, None   -> Var x
  | x, Some e -> ArrayElement (x,e)
# 67 "parser.ml"
let yytransl_const = [|
  259 (* MUL *);
  260 (* DIV *);
  261 (* MOD *);
  262 (* ADD *);
  263 (* SUB *);
  264 (* LT *);
  265 (* LE *);
  266 (* GT *);
  267 (* GE *);
  268 (* EQ *);
  269 (* NE *);
  270 (* BAND *);
  271 (* XOR *);
  272 (* BOR *);
  273 (* AND *);
  274 (* OR *);
  275 (* SWAP *);
  276 (* COMMA *);
  277 (* WCOLON *);
  278 (* MODADD *);
  279 (* MODSUB *);
  280 (* MODXOR *);
  281 (* LPAREN *);
  282 (* RPAREN *);
  283 (* LBRA *);
  284 (* RBRA *);
  285 (* CLASS *);
  286 (* INHERITS *);
  287 (* METHOD *);
  288 (* CALL *);
  289 (* UNCALL *);
  290 (* CONSTRUCT *);
  291 (* DESTRUCT *);
  292 (* SKIP *);
  293 (* FROM *);
  294 (* DO *);
  295 (* LOOP *);
  296 (* UNTIL *);
  297 (* INT *);
  298 (* NIL *);
  299 (* IF *);
  300 (* THEN *);
  301 (* ELSE *);
  302 (* FI *);
  303 (* LOCAL *);
  304 (* DELOCAL *);
  305 (* NEW *);
  306 (* DELETE *);
  307 (* COPY *);
  308 (* UNCOPY *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* CONST *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\005\000\005\000\005\000\006\000\
\007\000\007\000\008\000\008\000\009\000\009\000\004\000\004\000\
\010\000\010\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\013\000\013\000\013\000\013\000\012\000\
\014\000\016\000\016\000\017\000\017\000\018\000\019\000\019\000\
\015\000\015\000\020\000\020\000\021\000\021\000\022\000\023\000\
\023\000\002\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\001\000\001\000\001\000\001\000\
\004\000\004\000\003\000\001\000\001\000\000\000\004\000\001\000\
\002\000\001\000\003\000\008\000\008\000\005\000\005\000\007\000\
\007\000\011\000\006\000\003\000\003\000\003\000\003\000\004\000\
\004\000\001\000\003\000\003\000\001\000\003\000\001\000\001\000\
\006\000\002\000\001\000\002\000\000\000\002\000\003\000\001\000\
\001\000\000\000\002\000\001\000\001\000\000\000\005\000\002\000\
\000\000\001\000\002\000"

let yydefred = "\000\000\
\073\000\000\000\075\000\000\000\000\000\001\000\000\000\072\000\
\024\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
\068\000\000\000\000\000\000\000\000\000\062\000\067\000\000\000\
\059\000\000\000\052\000\054\000\056\000\000\000\058\000\000\000\
\000\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\004\000\000\000\003\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\022\000\023\000\000\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\045\000\044\000\047\000\046\000\000\000\000\000\
\051\000\000\000\031\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\005\000\006\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\049\000\000\000\000\000\038\000\000\000\039\000\000\000\000\000\
\000\000\000\000\026\000\025\000\000\000\027\000\000\000\043\000\
\000\000\000\000\000\000\040\000\041\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\063\000\064\000\078\000\015\000\069\000\118\000\
\119\000\051\000\052\000\030\000\016\000\025\000\033\000\026\000\
\012\000\017\000\035\000\018\000\019\000\008\000\005\000"

let yysindex = "\012\000\
\000\000\000\000\000\000\021\000\250\254\000\000\032\255\000\000\
\000\000\004\255\032\255\036\255\000\000\015\255\016\255\051\255\
\000\000\036\255\040\255\069\255\070\255\000\000\000\000\099\255\
\000\000\040\255\000\000\000\000\000\000\076\255\000\000\036\255\
\077\255\000\000\082\255\074\003\036\255\079\255\106\255\106\255\
\032\255\000\000\028\255\028\255\036\255\043\255\043\255\036\255\
\036\255\017\255\074\003\000\000\000\000\028\255\079\255\090\255\
\091\255\094\255\095\255\120\255\000\000\000\000\140\003\000\000\
\124\003\125\255\100\255\008\255\127\255\008\255\128\255\129\255\
\129\255\129\255\000\000\000\000\000\000\028\255\000\000\176\003\
\099\255\129\255\099\255\129\255\074\003\028\255\028\255\028\255\
\028\255\028\255\028\255\028\255\028\255\028\255\028\255\028\255\
\028\255\028\255\028\255\028\255\028\255\074\003\074\003\119\255\
\028\255\028\255\000\000\000\000\000\000\000\000\129\255\129\255\
\000\000\254\003\000\000\107\255\000\000\113\255\110\255\112\255\
\114\255\163\255\000\000\000\000\000\000\089\255\089\255\013\255\
\013\255\013\255\013\255\083\255\083\255\248\002\234\255\211\002\
\162\255\014\004\184\255\014\001\028\255\202\003\228\003\000\000\
\000\000\129\255\129\255\000\000\129\255\000\000\137\255\074\003\
\074\003\031\003\000\000\000\000\118\255\000\000\121\255\000\000\
\240\001\078\002\052\003\000\000\000\000\028\255\028\255\036\255\
\254\003\254\003\138\255\133\255\028\255\254\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\146\000\000\000\000\000\000\000\
\000\000\007\255\000\000\117\255\000\000\148\255\106\255\000\000\
\000\000\122\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\000\000\000\000\000\000\124\255\
\000\000\000\000\130\255\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\003\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\132\255\000\000\132\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\137\002\000\000\000\000\000\000\134\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\105\000\249\000\
\055\001\095\001\135\001\157\000\209\000\176\001\216\001\012\002\
\052\002\108\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\132\255\000\000\000\000\132\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\161\002\198\002\000\000\000\000\000\000\235\002"

let yygindex = "\000\000\
\000\000\000\000\224\255\040\000\000\000\004\000\107\000\000\000\
\182\255\185\255\212\255\222\255\211\255\129\000\000\000\000\000\
\000\000\067\000\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 1311
let yytable = "\066\000\
\032\000\071\000\072\000\073\000\057\000\059\000\079\000\061\000\
\038\000\121\000\010\000\065\000\001\000\122\000\013\000\086\000\
\087\000\088\000\089\000\090\000\006\000\080\000\007\000\032\000\
\095\000\096\000\057\000\056\000\038\000\061\000\139\000\140\000\
\009\000\011\000\106\000\074\000\009\000\061\000\075\000\076\000\
\077\000\020\000\021\000\009\000\060\000\114\000\116\000\061\000\
\120\000\068\000\070\000\022\000\008\000\123\000\124\000\125\000\
\126\000\127\000\128\000\129\000\130\000\131\000\132\000\133\000\
\134\000\135\000\136\000\137\000\138\000\062\000\024\000\157\000\
\142\000\143\000\159\000\050\000\014\000\079\000\056\000\058\000\
\161\000\162\000\163\000\067\000\023\000\086\000\087\000\088\000\
\089\000\090\000\050\000\086\000\087\000\088\000\079\000\079\000\
\027\000\028\000\034\000\029\000\032\000\037\000\036\000\053\000\
\009\000\054\000\055\000\107\000\154\000\109\000\081\000\111\000\
\112\000\113\000\083\000\082\000\079\000\079\000\079\000\084\000\
\085\000\117\000\171\000\117\000\050\000\104\000\105\000\108\000\
\110\000\038\000\141\000\146\000\147\000\169\000\170\000\148\000\
\149\000\160\000\172\000\150\000\174\000\050\000\050\000\164\000\
\173\000\074\000\165\000\070\000\053\000\066\000\144\000\145\000\
\069\000\071\000\031\000\065\000\014\000\030\000\000\000\029\000\
\000\000\050\000\000\000\038\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\050\000\050\000\000\000\000\000\000\000\000\000\
\038\000\117\000\158\000\000\000\117\000\000\000\000\000\050\000\
\050\000\050\000\039\000\040\000\041\000\151\000\042\000\043\000\
\050\000\050\000\050\000\000\000\000\000\044\000\000\000\000\000\
\015\000\045\000\000\000\046\000\047\000\048\000\049\000\039\000\
\040\000\041\000\000\000\042\000\043\000\000\000\152\000\000\000\
\000\000\000\000\044\000\000\000\000\000\000\000\045\000\000\000\
\046\000\047\000\048\000\049\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\000\000\032\000\032\000\
\032\000\000\000\032\000\000\000\032\000\032\000\071\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\008\000\011\000\057\000\
\000\000\057\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\008\000\000\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\012\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\009\000\000\000\000\000\000\000\000\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\009\000\013\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\000\000\000\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\014\000\014\000\014\000\
\000\000\000\000\014\000\014\000\014\000\014\000\014\000\016\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\014\000\000\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\000\000\000\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\015\000\000\000\000\000\000\000\000\000\000\000\017\000\
\015\000\015\000\015\000\015\000\000\000\000\000\015\000\015\000\
\015\000\015\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\015\000\000\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\010\000\000\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\000\000\010\000\010\000\
\010\000\010\000\010\000\018\000\000\000\000\000\038\000\000\000\
\000\000\000\000\000\000\000\000\010\000\010\000\000\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\000\000\000\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\039\000\040\000\041\000\
\000\000\042\000\043\000\019\000\000\000\000\000\000\000\011\000\
\044\000\000\000\153\000\000\000\045\000\000\000\046\000\047\000\
\048\000\049\000\000\000\000\000\011\000\011\000\011\000\011\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\011\000\000\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\012\000\
\000\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\020\000\012\000\012\000\012\000\012\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\000\012\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\013\000\
\035\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\000\000\013\000\013\000\013\000\013\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\000\000\013\000\013\000\000\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
\016\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\000\000\000\000\016\000\016\000\016\000\
\016\000\016\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\016\000\016\000\000\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\017\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\000\000\000\000\017\000\017\000\
\017\000\017\000\042\000\000\000\000\000\000\000\000\000\000\000\
\038\000\000\000\000\000\017\000\017\000\000\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\000\000\000\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\018\000\000\000\000\000\039\000\
\040\000\041\000\000\000\042\000\043\000\000\000\000\000\166\000\
\000\000\000\000\044\000\018\000\018\000\018\000\045\000\000\000\
\046\000\047\000\048\000\049\000\000\000\000\000\000\000\018\000\
\018\000\000\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\019\000\000\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\000\000\000\000\000\000\000\000\019\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\019\000\
\019\000\000\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\000\000\000\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\000\000\000\000\000\000\000\000\020\000\039\000\040\000\041\000\
\000\000\042\000\043\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\000\000\167\000\045\000\020\000\046\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\020\000\
\020\000\035\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\000\000\000\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\000\000\037\000\000\000\000\000\000\000\035\000\000\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\000\000\035\000\
\035\000\000\000\000\000\035\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\037\000\000\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\036\000\037\000\
\037\000\000\000\000\000\037\000\000\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\036\000\000\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\042\000\036\000\036\000\000\000\000\000\
\036\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\000\000\000\000\042\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\042\000\042\000\000\000\000\000\042\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\038\000\
\000\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\040\000\
\041\000\000\000\042\000\043\000\000\000\000\000\000\000\000\000\
\000\000\044\000\038\000\000\000\000\000\045\000\000\000\046\000\
\047\000\048\000\049\000\039\000\040\000\041\000\000\000\042\000\
\043\000\000\000\000\000\000\000\000\000\000\000\044\000\000\000\
\000\000\000\000\045\000\168\000\046\000\047\000\048\000\049\000\
\000\000\039\000\040\000\041\000\000\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\
\045\000\000\000\046\000\047\000\048\000\049\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\103\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\102\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\115\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\155\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\156\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000"

let yycheck = "\045\000\
\000\000\000\000\048\000\049\000\039\000\040\000\051\000\001\001\
\001\001\084\000\007\000\044\000\001\000\085\000\011\000\003\001\
\004\001\005\001\006\001\007\001\000\000\054\000\029\001\021\001\
\012\001\013\001\000\000\025\001\001\001\002\001\102\000\103\000\
\001\001\030\001\027\001\019\001\001\001\031\001\022\001\023\001\
\024\001\027\001\027\001\001\001\041\000\078\000\081\000\041\001\
\083\000\046\000\047\000\001\001\000\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\042\001\031\001\146\000\
\105\000\106\000\149\000\036\000\041\001\122\000\039\000\040\000\
\152\000\153\000\154\000\041\001\018\000\003\001\004\001\005\001\
\006\001\007\001\051\000\003\001\004\001\005\001\139\000\140\000\
\028\001\028\001\032\000\001\001\025\001\020\001\026\001\037\000\
\000\000\027\001\001\001\068\000\141\000\070\000\021\001\072\000\
\073\000\074\000\021\001\025\001\161\000\162\000\163\000\025\001\
\001\001\082\000\168\000\084\000\085\000\001\001\027\001\001\001\
\001\001\001\001\012\001\025\001\020\001\166\000\167\000\026\001\
\025\001\001\001\001\001\026\001\173\000\102\000\103\000\026\001\
\012\001\000\000\026\001\031\001\001\001\026\001\111\000\112\000\
\031\001\047\000\026\000\026\001\000\000\026\001\255\255\026\001\
\255\255\122\000\255\255\001\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\139\000\140\000\255\255\255\255\255\255\255\255\
\001\001\146\000\147\000\255\255\149\000\255\255\255\255\152\000\
\153\000\154\000\032\001\033\001\034\001\035\001\036\001\037\001\
\161\000\162\000\163\000\255\255\255\255\043\001\255\255\255\255\
\000\000\047\001\255\255\049\001\050\001\051\001\052\001\032\001\
\033\001\034\001\255\255\036\001\037\001\255\255\039\001\255\255\
\255\255\255\255\043\001\255\255\255\255\255\255\047\001\255\255\
\049\001\050\001\051\001\052\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\255\255\026\001\255\255\028\001\029\001\029\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\001\001\000\000\029\001\
\255\255\031\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\000\000\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\001\001\255\255\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\000\000\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\008\001\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\001\001\255\255\255\255\255\255\255\255\255\255\000\000\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\001\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\255\255\014\001\015\001\
\016\001\017\001\018\001\000\000\255\255\255\255\001\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\032\001\033\001\034\001\
\255\255\036\001\037\001\000\000\255\255\255\255\255\255\001\001\
\043\001\255\255\045\001\255\255\047\001\255\255\049\001\050\001\
\051\001\052\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\001\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\000\000\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\001\001\
\000\000\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\255\255\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\028\001\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\001\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\001\001\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\015\001\016\001\
\017\001\018\001\000\000\255\255\255\255\255\255\255\255\255\255\
\001\001\255\255\255\255\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\001\001\255\255\255\255\032\001\
\033\001\034\001\255\255\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\016\001\017\001\018\001\047\001\255\255\
\049\001\050\001\051\001\052\001\255\255\255\255\255\255\028\001\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\001\001\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\028\001\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\255\255\255\255\255\255\255\255\001\001\032\001\033\001\034\001\
\255\255\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\043\001\255\255\255\255\046\001\047\001\018\001\049\001\050\001\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\001\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\255\255\001\001\255\255\255\255\255\255\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\255\255\255\255\043\001\255\255\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\001\001\039\001\
\040\001\255\255\255\255\043\001\255\255\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\001\001\039\001\040\001\255\255\255\255\
\043\001\255\255\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\255\255\255\255\043\001\255\255\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\001\001\
\255\255\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\032\001\033\001\
\034\001\255\255\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\043\001\001\001\255\255\255\255\047\001\255\255\049\001\
\050\001\051\001\052\001\032\001\033\001\034\001\255\255\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\043\001\255\255\
\255\255\255\255\047\001\048\001\049\001\050\001\051\001\052\001\
\255\255\032\001\033\001\034\001\255\255\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\047\001\255\255\049\001\050\001\051\001\052\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001"

let yynames_const = "\
  MUL\000\
  DIV\000\
  MOD\000\
  ADD\000\
  SUB\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  EQ\000\
  NE\000\
  BAND\000\
  XOR\000\
  BOR\000\
  AND\000\
  OR\000\
  SWAP\000\
  COMMA\000\
  WCOLON\000\
  MODADD\000\
  MODSUB\000\
  MODXOR\000\
  LPAREN\000\
  RPAREN\000\
  LBRA\000\
  RBRA\000\
  CLASS\000\
  INHERITS\000\
  METHOD\000\
  CALL\000\
  UNCALL\000\
  CONSTRUCT\000\
  DESTRUCT\000\
  SKIP\000\
  FROM\000\
  DO\000\
  LOOP\000\
  UNTIL\000\
  INT\000\
  NIL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  LOCAL\000\
  DELOCAL\000\
  NEW\000\
  DELETE\000\
  COPY\000\
  UNCOPY\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  CONST\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prog) in
    Obj.repr(
# 92 "parser.mly"
             ( Prog _1 )
# 632 "parser.ml"
               : Syntax.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 96 "parser.mly"
                 ( Const _1             )
# 639 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'anyId) in
    Obj.repr(
# 97 "parser.mly"
                 ( anyId2obj _1         )
# 646 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                 ( Nil                  )
# 652 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 99 "parser.mly"
                 ( Binary(Mul,  _1, _3) )
# 660 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 100 "parser.mly"
                 ( Binary(Div,  _1, _3) )
# 668 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 101 "parser.mly"
                 ( Binary(Mod,  _1, _3) )
# 676 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 102 "parser.mly"
                 ( Binary(Add,  _1, _3) )
# 684 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 103 "parser.mly"
                 ( Binary(Sub,  _1, _3) )
# 692 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 104 "parser.mly"
                 ( Binary(Lt,   _1, _3) )
# 700 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 105 "parser.mly"
                 ( Binary(Le,   _1, _3) )
# 708 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 106 "parser.mly"
                 ( Binary(Gt,   _1, _3) )
# 716 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 107 "parser.mly"
                 ( Binary(Ge,   _1, _3) )
# 724 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 108 "parser.mly"
                 ( Binary(Eq,   _1, _3) )
# 732 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 109 "parser.mly"
                 ( Binary(Ne,   _1, _3) )
# 740 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 110 "parser.mly"
                 ( Binary(Band, _1, _3) )
# 748 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 111 "parser.mly"
                 ( Binary(Xor,  _1, _3) )
# 756 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 112 "parser.mly"
                 ( Binary(Bor,  _1, _3) )
# 764 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 113 "parser.mly"
                 ( Binary(And,  _1, _3) )
# 772 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 114 "parser.mly"
                 ( Binary(Or,   _1, _3) )
# 780 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
           ( ModAdd )
# 786 "parser.ml"
               : 'modop))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
           ( ModSub )
# 792 "parser.ml"
               : 'modop))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
           ( ModXor )
# 798 "parser.ml"
               : 'modop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser.mly"
         ( _1 )
# 805 "parser.ml"
               : 'typeId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 125 "parser.mly"
                         ( (_1, _3) )
# 813 "parser.ml"
               : 'arrayTypeName))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 126 "parser.mly"
                         ( ("int", _3) )
# 820 "parser.ml"
               : 'arrayTypeName))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'anyIds1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'anyId) in
    Obj.repr(
# 129 "parser.mly"
                        ( _1 @ [_3])
# 828 "parser.ml"
               : 'anyIds1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'anyId) in
    Obj.repr(
# 130 "parser.mly"
                        ( [_1] )
# 835 "parser.ml"
               : 'anyIds1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'anyIds1) in
    Obj.repr(
# 133 "parser.mly"
            ( _1 )
# 842 "parser.ml"
               : 'anyIds))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
            ( [] )
# 848 "parser.ml"
               : 'anyIds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 137 "parser.mly"
                     ( (_1, Some _3) )
# 856 "parser.ml"
               : 'anyId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 138 "parser.mly"
                     ( (_1, None) )
# 863 "parser.ml"
               : 'anyId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stms1) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stm) in
    Obj.repr(
# 142 "parser.mly"
              ( _1 @ [_2])
# 871 "parser.ml"
               : 'stms1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stm) in
    Obj.repr(
# 143 "parser.mly"
              ( [_1] )
# 878 "parser.ml"
               : 'stms1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'anyId) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'modop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 147 "parser.mly"
    ( Assign(_1, _2, _3) )
# 887 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'stms1) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stms1) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 149 "parser.mly"
    ( Conditional(_2, _4, _6, _8) )
# 897 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'stms1) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stms1) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 151 "parser.mly"
    ( Loop(_2, _4, _6, _8) )
# 907 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'methodName) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'anyIds) in
    Obj.repr(
# 153 "parser.mly"
    ( LocalCall(_2, _4) )
# 915 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'methodName) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'anyIds) in
    Obj.repr(
# 155 "parser.mly"
    ( LocalUncall(_2, _4) )
# 923 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'anyId) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'methodName) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'anyIds) in
    Obj.repr(
# 157 "parser.mly"
    ( ObjectCall(_2, _4, _6) )
# 932 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'anyId) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'methodName) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'anyIds) in
    Obj.repr(
# 159 "parser.mly"
    ( ObjectUncall(_2, _4, _6) )
# 941 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : 'dataType) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stms1) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'dataType) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 161 "parser.mly"
    ( LocalBlock(_2, _3, _5, _6, _11) )
# 954 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stms1) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "parser.mly"
    ( ObjectBlock(_2, _3, _4) )
# 964 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arrayTypeName) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 165 "parser.mly"
    ( ArrayConstruction(_2, _3) )
# 972 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'anyId) in
    Obj.repr(
# 167 "parser.mly"
    ( ObjectConstruction(_2, _3) )
# 980 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arrayTypeName) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 169 "parser.mly"
    ( ArrayDestruction(_2, _3) )
# 988 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'anyId) in
    Obj.repr(
# 171 "parser.mly"
    ( ObjectDestruction(_2, _3) )
# 996 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'dataType) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'anyId) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'anyId) in
    Obj.repr(
# 173 "parser.mly"
    ( CopyReference(_2, _3, _4) )
# 1005 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'dataType) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'anyId) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'anyId) in
    Obj.repr(
# 175 "parser.mly"
    ( UncopyReference(_2, _3, _4) )
# 1014 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser.mly"
    ( Skip )
# 1020 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'anyId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'anyId) in
    Obj.repr(
# 179 "parser.mly"
    ( Swap(_1, _3) )
# 1028 "parser.ml"
               : 'stm))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "parser.mly"
                     ( IntegerArrayType   )
# 1034 "parser.ml"
               : 'dataType))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "parser.mly"
                     ( IntegerType        )
# 1040 "parser.ml"
               : 'dataType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeId) in
    Obj.repr(
# 184 "parser.mly"
                     ( ObjectArrayType _1 )
# 1047 "parser.ml"
               : 'dataType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeId) in
    Obj.repr(
# 185 "parser.mly"
                     ( ObjectType _1      )
# 1054 "parser.ml"
               : 'dataType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 189 "parser.mly"
       ( _1 )
# 1061 "parser.ml"
               : 'methodName))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'methodName) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'varDecCommas) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stms1) in
    Obj.repr(
# 193 "parser.mly"
    ( MDecl(_2, _4, _6) )
# 1070 "parser.ml"
               : 'methDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'methDecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'methDec) in
    Obj.repr(
# 196 "parser.mly"
                     ( _1 @ [_2] )
# 1078 "parser.ml"
               : 'methDecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'methDec) in
    Obj.repr(
# 197 "parser.mly"
                     ( [_1]      )
# 1085 "parser.ml"
               : 'methDecs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typeId) in
    Obj.repr(
# 200 "parser.mly"
                    ( Some _2 )
# 1092 "parser.ml"
               : 'inherits))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
                    ( None )
# 1098 "parser.ml"
               : 'inherits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dataType) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 204 "parser.mly"
                ( Decl(_1,_2) )
# 1106 "parser.ml"
               : 'varDec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varDecCommas1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varDec) in
    Obj.repr(
# 207 "parser.mly"
                               ( _1 @ [_3] )
# 1114 "parser.ml"
               : 'varDecCommas1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varDec) in
    Obj.repr(
# 208 "parser.mly"
                               ( [_1]      )
# 1121 "parser.ml"
               : 'varDecCommas1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varDecCommas1) in
    Obj.repr(
# 211 "parser.mly"
                  ( _1 )
# 1128 "parser.ml"
               : 'varDecCommas))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "parser.mly"
                  ( [] )
# 1134 "parser.ml"
               : 'varDecCommas))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'varDecs1) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'varDec) in
    Obj.repr(
# 215 "parser.mly"
                    ( _1 @ [_2] )
# 1142 "parser.ml"
               : 'varDecs1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varDec) in
    Obj.repr(
# 216 "parser.mly"
                    ( [_1] )
# 1149 "parser.ml"
               : 'varDecs1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varDecs1) in
    Obj.repr(
# 219 "parser.mly"
             ( _1 )
# 1156 "parser.ml"
               : 'varDecs))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "parser.mly"
             ( [] )
# 1162 "parser.ml"
               : 'varDecs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'inherits) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'varDecs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'methDecs) in
    Obj.repr(
# 224 "parser.mly"
                                           ( CDecl(_2, _3, _4, _5) )
# 1172 "parser.ml"
               : 'aClass))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'classList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'aClass) in
    Obj.repr(
# 227 "parser.mly"
                      ( _1 @ [_2] )
# 1180 "parser.ml"
               : 'classList))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "parser.mly"
                      ( [] )
# 1186 "parser.ml"
               : 'classList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'classList) in
    Obj.repr(
# 232 "parser.mly"
                  ( _1 )
# 1193 "parser.ml"
               : 'prog))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.prog)
;;
