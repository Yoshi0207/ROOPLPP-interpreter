class Cell
    Cell next
    Object data

    method add(Cell head, int index, int i, Cell cell)
	if index != i && cell != nil then
	    i += 1
	    call next::add(head, index, i, cell)
	fi index = i && cell = nil

	local Cell tmp = nil
	local int j = 0
	call head::get(index - 1, j, tmp)
	if index = i && cell != nil then
	    cell.next <=> this
	    this <=> cell
        fi index = i && cell = nil && tmp.next = this
	uncall head::get(index - 1, j, tmp)
	delocal int j = 0
	delocal Cell tmp = nil

    method addLast(Cell cell)
        if next != nil && cell != nil then
	    call next::addLast(cell)
	fi this != nil && cell = nil

	if next = nil && cell != nil then
	    next <=> cell
	fi next.next = nil && cell = nil
	
    method get(int index, int i, Object x)      	
	if index != i && x = nil then
	    i += 1
	    call next::get(index, i, x)
	fi index = i && x != nil
	
        if index = i && x = nil then
	    copy Cell this x  
	fi index = i && x = this

    method indexOf(Object o, int index)
        if data != o then
	    index += 1
	    call next::indexOf(o, index)
	fi data != o
		
    method pretty()
        show(data)
    	if next != nil then
      	    print(" -> ")
      	    call next::pretty()
        fi next != nil

class LinkedList
    Cell head
    int listLength

    method insertHead(Cell cell)
        if head = nil & cell != nil then
      	    head <=> cell
        else skip
        fi head != nil & cell = nil
    	
    method add(Object o)
        call addLast(o)
	
    method add(int index, Object o)
      	if index = 0 then
	    call addFirst(o)
        else
	    if index = listLength then
	        call addLast(o)
	    else
	        local Cell cell = nil
  	    	new Cell cell
      	    	cell.data ^= o
            	local int i = 0
      	    	call head::add(head, index, i, cell)
      	    	delocal int i = index
            	delocal Cell cell = nil
	    	listLength += 1
	    fi index = listLength - 1
	fi index = 0
	
    method addFirst(Object o)
        local Cell cell = nil
	new Cell cell
	cell.data ^= o
	call insertHead(cell)
	if head != nil && cell != nil then
            cell.next <=> head
            head <=> cell
	fi head != nil && cell = nil && head.next != nil
	delocal Cell cell = nil
	listLength += 1

    method addLast(Object o)            
        local Cell cell = nil
	new Cell cell	
	cell.data ^= o
	call insertHead(cell)
	if head != nil && cell != nil then
            call head::addLast(cell)
	fi head != nil && cell = nil && head.next != nil
	delocal Cell cell = nil
        listLength += 1
	
    method get(int index, Object x)
        local Cell cell = nil
        local int i = 0	
        call head::get(index, i, cell)
	x ^= cell.data
	uncall head::get(index, i, cell)
        delocal int i = 0
	delocal Cell cell = nil

    method size(int result)
        result ^= listLength
	
    method indexOf(Object o, int index)
        call head::indexOf(o, index)

    method remove(int index, Object o)
        uncall add(index, o)

    method pretty()
        print("Linked_List[")
    	call head::pretty()
    	print("]\n")	
